#precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{Type{Base.Dict{Type, Type}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Type{Base.Dict{_A, _B}} where _B where _A, Int64}}})
#precompile(Tuple{Type{CSV.Context}, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg, CSV.Arg})
#precompile(Tuple{typeof(Base.convert), Type{Union{Base.Cmd, Base.CodeUnits{UInt8, String}, AbstractString, Array{UInt8, 1}, IO, FilePathsBase.AbstractPath, Base.SubArray{UInt8, 1, Array{UInt8, 1}, I, L} where L where I}}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.convert), Type{Union{Array{String, 1}, Array{Symbol, 1}, Integer, AbstractArray{var"#s99", 1} where var"#s99"<:Integer}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Integer}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}, String}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}, String}}, String})
precompile(Tuple{typeof(Base.convert), Type{Union{Char, UInt8}}, Char})
precompile(Tuple{typeof(Base.convert), Type{Union{Char, UInt8}}, UInt8})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{String, 1}}}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{K, V} where V where K}, Base.Dict{Type, Type}})
precompile(Tuple{typeof(Base.convert), Type{Union{Function, Real, Tuple, Base.AbstractDict{K, V} where V where K, AbstractArray{T, 1} where T, Type}}, Tuple{Float64, Int64}})
precompile(Tuple{typeof(CSV.getsource), Any, Bool})
precompile(Tuple{typeof(Base.:(<=)), Int64, Int64})
precompile(Tuple{typeof(CSV.skiptorow), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Any, Bool, Int64, Int64})
precompile(Tuple{typeof(CSV.checkcommentandemptyline), Array{UInt8, 1}, Int64, Int64, Any, Bool, Base.RefValue{Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Ptr{Nothing}, Int64}, Int64, Int64})
precompile(Tuple{Type{Parsers.Options}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Array{String, 1}, Array{String, 1}, Nothing, Bool, Bool, Nothing, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options, Any, Bool})
precompile(Tuple{typeof(CSV.readsplitline), Array{UInt8, 1}, Int64, Int64, Parsers.Options})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Parsers.PosLen, Int16, Parsers.Options, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CSV.var"#10#13"{Bool}, Array{String, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, CSV.var"#10#13"{Bool}}})
precompile(Tuple{typeof(Base.values), Base.Dict{Type, Type}})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{Base.Dict{Type, Type}}})
precompile(Tuple{Base.CoreLogging.var"#@info", LineNumberNode, Module, Vararg{Any}})
precompile(Tuple{typeof(Base.string), String, Symbol, Vararg{Any}})
precompile(Tuple{typeof(Base.convert), Type{Base.CoreLogging.LogLevel}, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{typeof(Base.CoreLogging._invoked_shouldlog), Any, Any, Any, Any, Any})
precompile(Tuple{Base.var"#with_output_color##kw", NamedTuple{(:bold, :underline, :blink, :reverse, :hidden), Tuple{Bool, Bool, Bool, Bool, Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(Base.vcat), Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(AutoSysimages.__init__)})
precompile(Tuple{typeof(Base.string), String, String, Int32})
precompile(Tuple{typeof(Base.print_to_string), Int32, Vararg{Any}})
precompile(Tuple{typeof(AutoSysimages.start)})
precompile(Tuple{typeof(Base.Filesystem.mkpath), String})
precompile(Tuple{typeof(Base.getproperty), Base.IOStream, Symbol})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Nothing}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Tuple{Base.SubString{String}, Union{Nothing, String}}, Int64}}})
precompile(Tuple{typeof(Core.Compiler.convert), Type{DataType}, Type{Tuple{Tuple{Base.SubString{String}, Any}, Int64}}})
precompile(Tuple{AutoSysimages.var"#_atexit#11"})
precompile(Tuple{typeof(Base.Filesystem.rm), String})
precompile(Tuple{Base.var"##open#355", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), AutoSysimages.var"#26#28"{Base.Set{String}, Array{String, 1}}, String, Vararg{String}})
